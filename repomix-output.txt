This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-12T17:09:09.600Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
ft_atoi.c
ft_bzero.c
ft_calloc.c
ft_isalnum.c
ft_isalpha.c
ft_isascii.c
ft_isdigit.c
ft_isprint.c
ft_itoa.c
ft_memchr.c
ft_memcmp.c
ft_memcpy.c
ft_memmove.c
ft_memset.c
ft_putchar_fd.c
ft_putendl_fd.c
ft_putnbr_fd.c
ft_putstr_fd.c
ft_split.c
ft_strchr.c
ft_strdup.c
ft_striteri.c
ft_strjoin.c
ft_strlcat.c
ft_strlcpy.c
ft_strlen.c
ft_strmapi.c
ft_strncmp.c
ft_strnstr.c
ft_strrchr
ft_strrchr.c
ft_strtrim.c
ft_substr.c
ft_tolower.c
ft_toupper.c
libft.h
Makefile
README.md

================================================================
Repository Files
================================================================

================
File: ft_atoi.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 17:21:41 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 18:19:02 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

long	ft_atol(const char *nptr)
{
	unsigned long	count;
	int				mult;

	count = 0;
	mult = 1;
	while ((*nptr >= 9 && *nptr <= 13) || *nptr == ' ')
		nptr++;
	if (*nptr == '+' || *nptr == '-')
	{
		if (*nptr == '-')
			mult *= -1;
		nptr++;
	}
	while (*nptr >= '0' && *nptr <= '9')
	{
		count = (count * 10) + (*nptr - '0');
		nptr++;
	}
	return (mult * count);
}

/*
 * Infers a number from a sing.
 *
 * @param	nptr	sing to infer number from
 *
 * @returns	infered number
 * @returns	0 if failed (or if there was no number)
 *
 * Execution:
 * 1. Skip spaces
 * 2. Skip `+` and registers _at most_ 1 `-` for negative numbers
 * 3. Registers the number digit by digit until any non-decimal char is found
 * 4. Skips the rest of the sing
 *
 * Caveats:
 * - Ignores only white spaces first, then only `+`
 * - Doesn't handle multi-negation
 * - Not "smart"
 */
int	ft_atoi(const char *nptr)
{
	return (ft_atol(nptr));
}

================
File: ft_bzero.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 13:30:33 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 13:31:47 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The  bzero()  function erases the data in the n bytes of the memory starting
 * at the location pointed to by s, by writing zeros (bytes containing '\0') to
 * that area.
 *
 * @param	s	pointer
 * @param	n	size in number of bytes
 *
 * @returns	pointer to the memory area s
 */
void	*ft_bzero(void *s, size_t n)
{
	return (ft_memset(s, 0, n));
}

================
File: ft_calloc.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 18:23:11 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 18:56:22 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The calloc() function allocates memory for an array  of  nmemb  elements  of
 * size  bytes  each and returns a pointer to the allocated memory.  The memory
 * is set to zero.  If nmemb or size is 0, then calloc() returns  either  NULL,
 * or  a  unique pointer value that can later be successfully passed to free().
 * If the multiplication of nmemb and size would result  in  integer  overflow,
 * then  calloc() returns an error.  By contrast, an integer overflow would not
 * be detected in the following call to malloc(), with the result that  an  in‐
 * correctly sized block of memory would be allocated:
 *
 * ```c
 * malloc(nmemb * size);
 * ```
 *
 * @param	nmemb	length of the variable
 * @param	size	length of the type of the variable
 *
 * @returns	pointer filled with NUL
 */
void	*ft_calloc(size_t nmemb, size_t size)
{
	void	*ptr;

	if (size && nmemb > __SIZE_MAX__ / size)
		return (0);
	ptr = malloc(size * nmemb);
	if (!ptr)
		return (0);
	return (ft_bzero(ptr, size * nmemb));
}

================
File: ft_isalnum.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/05 15:35:34 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 13:25:31 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Tells if a character is alphanumerical (lowercase or uppercase or numerical
 * digit)
 *
 * @param	c	character
 *
 * @returns	boolean result
 */
int	ft_isalnum(int c)
{
	return (ft_isalpha(c) || ft_isdigit(c));
}

================
File: ft_isalpha.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/05 15:40:12 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/05 15:40:13 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * Tells if a character is alphabetical (lowercase or uppercase)
 *
 * @param	c	character
 *
 * @returns	boolean result
 */
int	ft_isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

================
File: ft_isascii.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 12:42:17 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 12:43:36 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * Tells if a character is in the ASCII tabe
 *
 * @param	c	character
 *
 * @returns	boolean result
 */
int	ft_isascii(int c)
{
	return (c <= 127 && c >= 0);
}

================
File: ft_isdigit.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/05 15:08:14 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/05 15:17:46 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * Tells if a character is a decimal digit
 *
 * @param	c	character
 *
 * @returns	boolean result
 */
int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

================
File: ft_isprint.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 12:50:51 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 12:55:51 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * Tells if a character is printable in the ASCII tabe
 *
 * @param	c	character
 *
 * @returns	boolean result
 */
int	ft_isprint(int c)
{
	return (c >= 32 && c <= 126);
}

================
File: ft_itoa.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 11:19:05 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 12:16:21 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Calculates the length of digits needed to represent an integer as a string,
 * including the minus sign for negative numbers.
 *
 * @param	n	the integer to measure
 * @param	b	base
 *
 * @returns	total length needed for the string representation:
 * 			- for 0: returns 1
 * 			- for negative numbers: number of digits + 1 (for the minus sign)
 * 			- for positive numbers: number of digits
 *
 * Examples:
 * - get_num_len(0)    returns 1 ("0")
 * - get_num_len(123)  returns 3 ("123")
 * - get_num_len(-123) returns 4 ("-123")
 * - get_num_len(-0)   returns 1 ("0")
 */
size_t	get_num_len(int n, const char *b)
{
	size_t	len;
	size_t	bl;
	long	num;

	len = 0;
	if (n <= 0)
		len = 1;
	bl = ft_strlen(b);
	num = n;
	if (n < 0)
		num = -(long)n;
	while (num > 0)
	{
		num /= bl;
		len++;
	}
	return (len);
}

/*
 * Fills a pre-allocated string with the string representation of an integer.
 * The function handles negative numbers and writes directly into the provided
 * string buffer.
 *
 * @param	str	pre-allocated string buffer to write into. Must be large enough
 * 				to hold the number plus null terminator (len + 1 bytes)
 * @param	n	the integer to convert to a string
 * @param	len	the length of the final string (excluding null terminator),
 * 				must match the actual space needed for the number
 * @param	b	base
 */
void	fill_number(char *s, int n, int len, const char *b)
{
	size_t	bl;
	long	num;
	int		is_negative;

	bl = ft_strlen(b);
	is_negative = 0;
	if (n < 0)
		is_negative = 1;
	num = n;
	if (is_negative)
		num = -(long)n;
	s[len] = '\0';
	while (len > is_negative)
	{
		len--;
		s[len] = b[num % bl];
		num /= bl;
	}
	if (is_negative)
		s[0] = '-';
}

/*
 * Allocates (with malloc(3)) and returns a string representing the integer
 * received as an argument. Negative numbers must be handled.
 * (base-dependant version)
 *
 * @param	n	number
 * @param	b	base
 *
 * @returns	infered string
 */
char	*ft_itoa_base(int n, const char *b)
{
	size_t	len;
	char	*s;

	len = get_num_len(n, b);
	s = ft_calloc(len + 1, sizeof(char));
	if (!s)
		return (0);
	fill_number(s, n, len, b);
	return (s);
}

/*
 * Allocates (with malloc(3)) and returns a string representing the integer
 * received as an argument. Negative numbers must be handled.
 *
 * @param	n	number
 *
 * @returns	infered string
 */
char	*ft_itoa(int n)
{
	return (ft_itoa_base(n, "0123456789"));
}

================
File: ft_memchr.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:41:27 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 16:53:12 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The  memchr()  function scans the initial n bytes of the memory area pointed
 * to by s for the first instance of c.  Both c and the  bytes  of  the  memory
 * area pointed to by s are interpreted as unsigned char.
 *
 * @param	s	haystack
 * @param	c	needle
 * @param	n	max bytes to scan
 *
 * @returns	pointer to the matching byte or NULL if the character does not occur
 * in the given memory area.
 */
void	*ft_memchr(const void *s, int c, size_t n)
{
	unsigned char	*se;

	se = (unsigned char *)s;
	while (n--)
	{
		if (*se == (unsigned char)c)
			return (se);
		se++;
	}
	return (0);
}

================
File: ft_memcmp.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:41:27 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 17:09:07 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The  memcmp()  function  compares the first n bytes (each interpreted as un‐
 * signed char) of the memory areas s1 and s2.
 *
 * @paran	s1	first string
 * @param	s2	second string
 * @param	n	max bytes to compare
 *
 * @returns	See below
 *
 * The memcmp() function returns an integer less than,  equal  to,  or  greater
 * than  zero  if  the  first  n bytes of s1 is found, respectively, to be less
 * than, to match, or be greater than the first n bytes of s2.
 *
 * For a nonzero return value, the sign is determined by the sign of  the  dif‐
 * ference  between the first pair of bytes (interpreted as unsigned char) that
 * differ in s1 and s2.
 *
 * If n is zero, the return value is zero.
 */
int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	unsigned char	*se1;
	unsigned char	*se2;
	size_t			i;

	if (n == 0)
		return (0);
	se1 = (unsigned char *)s1;
	se2 = (unsigned char *)s2;
	i = 0;
	while (n--)
	{
		if (se1[i] != se2[i])
			return ((unsigned char) se1[i] - (unsigned char) se2[i]);
		i++;
	}
	return (0);
}

================
File: ft_memcpy.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 13:33:47 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 14:24:17 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The  memcpy()  function  copies  n bytes from memory area src to memory area
 * dest.  The memory areas must not overlap.  Use memmove(3) if the memory  ar‐
 * eas do overlap.
 *
 * @param	s	pointer
 * @param	c	constant byte
 * @param	n	size in number of bytes
 *
 * @returns	pointer to the memory area s
 */
void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	const unsigned char	*src2;
	unsigned char		*dest2;

	if (!dest && !src)
		return (dest);
	if (n != 0)
	{
		src2 = (const unsigned char *) src;
		dest2 = (unsigned char *) dest;
		while (n-- > 0)
			*dest2++ = *src2++;
	}
	return (dest);
}

================
File: ft_memmove.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 13:33:47 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 14:24:52 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The  memmove()  function  copies n bytes from memory area src to memory area
 * dest.  The memory areas may overlap: copying takes place as though the bytes
 * in  src are first copied into a temporary array that does not overlap src or
 * dest, and the bytes are then copied from the temporary array to dest.
 *
 * @param	s	pointer
 * @param	c	constant byte
 * @param	n	size in number of bytes
 *
 * @returns	pointer to the memory area s
 */
void	*ft_memmove(void *dest, const void *src, size_t n)
{
	const unsigned char	*src2;
	unsigned char		*dest2;

	if (!dest && !src)
		return (dest);
	if (n == 0)
		return (dest);
	src2 = src;
	dest2 = dest;
	if ((dest2 > src2) && (dest2 < src2 + n))
	{
		dest2 += n;
		src2 += n;
		while (n--)
			*--dest2 = *--src2;
		return (dest);
	}
	return (ft_memcpy(dest, src, n));
}

================
File: ft_memset.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 12:59:54 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 13:27:59 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The  memset() function fills the first n bytes of the memory area pointed to
 * by s with the constant byte c.
 *
 * @param	s	pointer
 * @param	c	constant byte
 * @param	n	size in number of bytes
 *
 * @returns	pointer to the memory area s
 */
void	*ft_memset(void *s, int c, size_t n)
{
	unsigned char	*pt;

	if (n != 0)
	{
		pt = s;
		while (n != 0)
		{
			*pt++ = (unsigned char) c;
			n--;
		}
	}
	return (s);
}

================
File: ft_putchar_fd.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 17:17:19 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 17:21:49 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Outputs the character ’c’ to the given file descriptor.
 *
 * @param	c	the character to output
 * @param	fd	the file descriptor on which to write
 */
void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, sizeof(char));
}

================
File: ft_putendl_fd.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 17:22:44 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 17:30:25 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Outputs the string ’s’ to the given file descriptor followed by a newline.
 *
 * @param	s	the string to output
 * @param	fd	the file descriptor on which to write
 */
void	ft_putendl_fd(char *s, int fd)
{
	write(fd, s, ft_strlen(s) * sizeof(char));
	write(fd, "\n", sizeof(char));
}

================
File: ft_putnbr_fd.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 17:17:19 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 17:39:01 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Outputs the integer ’n’ to the given file descriptor.
 *
 * @param	c	the interger to output
 * @param	fd	the file descriptor on which to write
 */
void	ft_putnbr_fd(int n, int fd)
{
	if (n == -2147483648)
	{
		write(fd, "-2147483648", 11 * sizeof(char));
		return ;
	}
	if (n < 0)
	{
		ft_putchar_fd('-', fd);
		ft_putnbr_fd(-n, fd);
		return ;
	}
	if (n > 9)
	{
		ft_putnbr_fd(n / 10, fd);
		ft_putchar_fd(n % 10 + '0', fd);
		return ;
	}
	ft_putchar_fd(n + '0', fd);
}

================
File: ft_putstr_fd.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 17:22:44 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 17:30:38 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Outputs the string ’s’ to the given file descriptor.
 *
 * @param	s	the string to output
 * @param	fd	the file descriptor on which to write
 */
void	ft_putstr_fd(char *s, int fd)
{
	write(fd, s, ft_strlen(s) * sizeof(char));
}

================
File: ft_split.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 10:48:43 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 18:08:22 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Allocates and cuts a word from `start` to `finish`.
 *
 * @param	str		source string
 * @param	start	starting idx
 * @param	finish	ending idx
 *
 * @returns duplicated and cut string
 */
char	*ft_strcut(char *str, int start, int finish)
{
	char	*word;
	int		i;

	i = 0;
	word = (char *)malloc((finish - start + 1) * sizeof(char));
	if (!word)
		return (0);
	while (start < finish)
		word[i++] = str[start++];
	word[i] = '\0';
	return (word);
}

/*
 * Stupid function that saves space for the norm.
 */
size_t	ft_split_stupid(size_t ij[2], char *str, int *idx, char **split)
{
	char	*s;

	s = ft_strcut(str, *idx, ij[0]);
	if (!s)
		return (1);
	split[ij[1]++] = s;
	*idx = -1;
	return (0);
}

static size_t	count_words(char const *s, char c)
{
	size_t	count;
	int		in_word;

	count = 0;
	in_word = 0;
	while (*s)
	{
		if (*s != c && !in_word)
		{
			in_word = 1;
			count++;
		}
		else if (*s == c)
			in_word = 0;
		s++;
	}
	return (count);
}

/*
 * Allocates (with malloc(3)) and returns an array of strings obtained by
 * splitting ’s’ using the character ’c’ as a delimiter. The array must end
 * with a NULL pointer.
 *
 * @param	str	string to split
 * @param	c	delimiter
 *
 * @returns	array of strings
 * @returns	if didn't find the delimiter,
 * 			array of strings with `s` inside
 */
char	**ft_split(char *str, char c)
{
	size_t	ij[2];
	int		idx;
	char	**split;

	if (str == NULL)
		return (NULL);
	split = ft_calloc(count_words(str, c) + 1, sizeof(char *));
	if (!str || !(split))
		return (0);
	ij[0] = 0;
	ij[1] = 0;
	idx = -1;
	while (ij[0] <= (size_t)ft_strlen(str))
	{
		if (str[ij[0]] != c && idx < 0)
			idx = ij[0];
		else if ((str[ij[0]] == c || ij[0] == ft_strlen(str)) && idx >= 0)
			if (ft_split_stupid(ij, str, &idx, split))
				return (0);
		ij[0]++;
	}
	split[ij[1]] = 0;
	return (split);
}

================
File: ft_strchr.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 15:53:50 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 16:24:35 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * The strchr() function returns a pointer to the first occurrence of the char‐
 * acter c in the string s.
 *
 * @param	s	haystack
 * @param	c	needle
 *
 * @returns	pointer to the matched character or NULL if the character is not
 * found.
 */
char	*ft_strchr(const char *s, int c)
{
	while (*s)
	{
		if (*s == (char)c)
			return ((char *)s);
		s++;
	}
	if (*s == (char)c)
		return ((char *)s);
	return (0);
}

================
File: ft_strdup.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 18:49:08 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 19:07:07 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Duplicates a string.
 *
 * @param	s	string to duplicate
 *
 * @returns	string if everything worked
 * @returns	NULL if malloc failed
 */
char	*ft_strdup(const char *s)
{
	size_t	i;
	char	*dst;

	dst = ft_calloc(ft_strlen(s) + 1, sizeof(char));
	if (!dst)
		return (0);
	i = 0;
	while (s[i])
	{
		dst[i] = s[i];
		i++;
	}
	dst[i] = '\0';
	return ((char *)dst);
}

================
File: ft_striteri.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 16:50:27 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 17:16:17 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Applies the function ’f’ on each character of the string passed as argument,
 * passing its index as first argument. Each character is passed by address to
 * ’f’ to be modified if necessary.
 *
 * @param	s	the string on which to iterate
 * @param	f	the function to apply to each character
 */
void	ft_striteri(char *s, void (*f)(unsigned int, char*))
{
	size_t	i;

	i = 0;
	while (*s)
		f(i++, s++);
}

================
File: ft_strjoin.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 09:52:49 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 10:06:12 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Allocates (with malloc(3)) and returns a new string, which is the result of
 * the concatenation of ’s1’ and ’s2’.
 *
 * @param	s1	prefix string
 * @param	s2	suffix string
 *
 * @returns	the new string. NULL if allocation fails.
 */
char	*ft_strjoin(char const *s1, char const *s2)
{
	size_t	s1_len;
	size_t	s2_len;
	char	*dst;

	if (!s1 || !s2)
		return (0);
	s1_len = ft_strlen(s1);
	s2_len = ft_strlen(s2);
	dst = (char *)ft_calloc(s1_len + s2_len + 1, sizeof(char));
	if (!dst)
		return (0);
	ft_strlcpy(dst, s1, s1_len + 1);
	ft_strlcat(dst, s2, s1_len + s2_len + 1);
	return (dst);
}

================
File: ft_strlcat.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 15:07:16 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 09:55:43 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The strlcpy() and strlcat() functions copy and concatenate strings respec‐
 * tively.  They are designed to be safer, more consistent, and less error prone
 * replacements for strncpy(3) and strncat(3).  Unlike those functions, strlcpy()
 * and strlcat() take the full size of the buffer (not just the length) and guar‐
 * antee to NUL-terminate the result (as long as size is larger than 0 or, in the
 * case of strlcat(), as long as there is at least one byte free in dst).  Note
 * that a byte for the NUL should be included in size.  Also note that strlcpy()
 * and strlcat() only operate on true “C” strings.  This means that for strlcpy()
 * src must be NUL-terminated and for strlcat() both src and dst must be NUL-ter‐
 * minated.
 *
 * The strlcat() function appends the NUL-terminated string src to the end of
 * dst.  It will append at most size - strlen(dst) - 1 bytes, NUL-terminating the
 * result.
 *
 * @param	dst		destination pointer
 * @param	src		source pointer
 * @param	size	number of characters to copy
 *
 * @returns	pointer to the destination string dst
 */
unsigned int	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	dst_len;
	size_t	src_len;
	size_t	i;

	src_len = ft_strlen(src);
	dst_len = ft_strlen(dst);
	if (size <= dst_len)
		return (size + src_len);
	i = 0;
	while (size && src[i] && (dst_len + i) < (size - 1))
	{
		dst[dst_len + i] = src[i];
		i++;
	}
	dst[dst_len + i] = '\0';
	return (dst_len + src_len);
}

================
File: ft_strlcpy.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 14:26:39 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 09:32:54 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The strlcpy() and strlcat() functions copy and concatenate strings respec‐
 * tively.  They are designed to be safer, more consistent, and less error prone
 * replacements for strncpy(3) and strncat(3).  Unlike those functions, strlcpy()
 * and strlcat() take the full size of the buffer (not just the length) and guar‐
 * antee to NUL-terminate the result (as long as size is larger than 0 or, in the
 * case of strlcat(), as long as there is at least one byte free in dst).  Note
 * that a byte for the NUL should be included in size.  Also note that strlcpy()
 * and strlcat() only operate on true “C” strings.  This means that for strlcpy()
 * src must be NUL-terminated and for strlcat() both src and dst must be NUL-ter‐
 * minated.
 *
 * The strlcpy() function copies up to size - 1 characters from the NUL-termi‐
 * nated string src to dst, NUL-terminating the result.
 *
 * @param	dest	destination pointer
 * @param	src		source pointer
 * @param	size	number of characters to copy
 *
 * @returns	total length of the string the function tried to create
 */
unsigned int	ft_strlcpy(char *dst, const char *src, size_t size)
{
	size_t	i;

	i = 0;
	while (src[i])
		i++;
	if (size == 0)
		return (i);
	size--;
	while (size-- && *src)
		*dst++ = *src++;
	*dst = '\0';
	return (i);
}

================
File: ft_strlen.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/05 15:40:27 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 13:25:49 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Gets the length of a string.
 *
 * @param	str	string to get length from
 *
 * @retuns	length of str
 */
size_t	ft_strlen(const char *str)
{
	size_t	i;

	i = 0;
	while (str[i] != '\0')
		i++;
	return (i);
}

================
File: ft_strmapi.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 16:28:05 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 16:48:36 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Applies the function f to each character of the string s, passing its index
 * as the first argument and the character itself as the second. A new string
 * is created (using malloc(3)) to collect the results from the successive
 * applications of f.
 *
 * @param	s	the string on which to iterate
 * @param	f	the function to apply to each character
 *
 * @returns	the string created from the successive applications of ’f’.
 * 			NULL if the allocation fails.
 */
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	size_t	len;
	size_t	i;
	char	*dst;

	len = ft_strlen(s);
	dst = ft_calloc(len + 1, sizeof(char));
	if (!dst)
		return (0);
	i = 0;
	while (s[i])
	{
		dst[i] = f(i, s[i]);
		i++;
	}
	return (dst);
}

================
File: ft_strncmp.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:33:35 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 16:38:57 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The strcmp() function compares the two strings s1 and s2.  The locale is not
 * taken into account (for a locale-aware  comparison,  see  strcoll(3)).   The
 * comparison is done using unsigned characters.
 *
 * strcmp() returns an integer indicating the result of the comparison, as fol‐
 * lows:
 *
 * * 0, if the s1 and s2 are equal;
 * * a negative value if s1 is less than s2;
 * * a positive value if s1 is greater than s2.
 *
 * The strncmp() function is similar, except it compares  only  the  first  (at
 * most) n bytes of s1 and s2.
 *
 * @param	s1	first string
 * @param	s2	second string
 * @param	n	max bytes to compare
 */
int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	unsigned int	i;

	if (n == 0)
		return (0);
	i = 0;
	while (i < n)
	{
		if (s1[i] != s2[i] || !s1[i] || !s2[i])
			return ((unsigned char) s1[i] - (unsigned char) s2[i]);
		i++;
	}
	return (0);
}

================
File: ft_strnstr.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 17:10:34 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 09:24:34 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * The strnstr() function locates the first occurrence of the null-terminated
 * string little in the string big, where not more than len characters are
 * searched.  Characters that appear after a ‘\0’ character are not searched.
 * Since the strnstr() function is a FreeBSD specific API, it should only be used
 * when portability is not a concern.
 *
 * @param	big		string to search in
 * @param	little	substring to search for
 * @param	len		most characters to search
 *
 * @returns	If little is an empty string, big is returned; if little occurs
 * 			nowhere in big, NULL is returned; otherwise a pointer to the first
 * 			character of the first occurrence of little is returned.
 */
char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	i;
	size_t	j;

	if (!*little)
		return ((char *)big);
	i = 0;
	while (big[i] && i < len)
	{
		j = 0;
		if (big[i] == little[j])
		{
			while (big[i + j] == little[j] && (i + j) < len)
			{
				j++;
				if (!little[j])
					return ((char *)&big[i]);
			}
		}
		i++;
	}
	return (NULL);
}

================
File: ft_strrchr
================
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    ft_strrchr                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/11 16:25:29 by elagouch          #+#    #+#              #
#    Updated: 2024/11/11 17:09:29 by elagouch         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

================
File: ft_strrchr.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:25:36 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 16:31:43 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * The strrchr() function returns a pointer to the last occurrence of the char‐
 * acter c in the string s.
 *
 * @param	s	haystack
 * @param	c	needle
 *
 * @returns	pointer to the matched character or NULL if the character is not
 * found.
 */
char	*ft_strrchr(const char *s, int c)
{
	char	*se;

	se = 0;
	while (*s)
	{
		if (*s == (char)c)
			se = (char *)s;
		s++;
	}
	if (*s == (char)c)
		se = (char *)s;
	return (se);
}

================
File: ft_strtrim.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 10:07:26 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 10:46:03 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Allocates (with malloc(3)) and returns a copy of ’s1’ with the characters
 * specified in ’set’ removed from the beginning and the end of the string.
 *
 * @param	s1	string to be trimmed
 * @param	set	reference set of the characters to trim
 *
 * @returns	trimmed string. NULL  if the allocation failed.
 */
char	*ft_strtrim(char const *s1, char const *set)
{
	size_t	start;
	size_t	end;
	char	*s;

	if (!s1 || !set)
		return (0);
	start = 0;
	while (s1[start] && ft_strchr(set, s1[start]))
		start++;
	end = ft_strlen(s1);
	while (end > start && ft_strchr(set, s1[end - 1]))
		end--;
	s = ft_calloc(end - start + 1, sizeof(char));
	if (!s)
		return (0);
	ft_strlcpy(s, &s1[start], end - start + 1);
	return (s);
}

================
File: ft_substr.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 09:19:50 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 18:04:35 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * Allocates (with malloc(3)) and returns a substring from the string ’s’.
 * The substring begins at index ’start’ and is of maximum size ’len’.
 *
 * @param	s		the string from which to create the substring
 * @param	start	the start index of the substring in the string ’s’.
 * @param	len		the maximum length of the substring.
 *
 * @returns	the substring. NULL if the allocation fails.
 */
char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*dst;

	if (start >= ft_strlen(s))
	{
		dst = ft_calloc(1, sizeof(char));
		if (!dst)
			return (0);
		dst[0] = '\0';
		return (dst);
	}
	s = &(s[start]);
	if (len > ft_strlen(s))
		len = ft_strlen(s);
	dst = ft_calloc(len + 1, sizeof(char));
	if (!dst)
		return (0);
	ft_strlcpy(dst, s, len + 1);
	return (dst);
}

================
File: ft_tolower.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lower.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 15:29:06 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 15:52:10 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * If c is an uppercase letter, tolower() returns its lowercase equivalent,  if
 * a  lowercase representation exists in the current locale.  Otherwise, it re‐
 * turns c.  The tolower_l() function performs the same task, but uses the  lo‐
 * cale referred to by the locale handle locale.
 *
 * @param	c	character
 *
 * @returns	uppercase character or c i fthe conversion was not possible
 */
int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (c + 32);
	return (c);
}

================
File: ft_toupper.c
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 15:29:06 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/11 17:09:29 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

/*
 * If  c  is a lowercase letter, toupper() returns its uppercase equivalent, if
 * an uppercase representation exists in the current locale.  Otherwise, it re‐
 * turns  c.  The toupper_l() function performs the same task, but uses the lo‐
 * cale referred to by the locale handle locale.
 *
 * @param	c	character
 *
 * @returns	uppercase character or c i fthe conversion was not possible
 */
int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c - 32);
	return (c);
}

================
File: libft.h
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libft.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/05 15:32:58 by elagouch          #+#    #+#             */
/*   Updated: 2024/11/12 18:03:27 by elagouch         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBFT_H
# define LIBFT_H

# include <unistd.h>
# include <stdlib.h>

// Standard C lib
unsigned int	ft_strlcat(char *dst, const char *src, size_t size);
unsigned int	ft_strlcpy(char *dst, const char *src, size_t size);
size_t			ft_strlen(const char *str);
void			*ft_memmove(void *dest, const void *src, size_t n);
void			*ft_memcpy(void *dest, const void *src, size_t n);
void			*ft_memchr(const void *s, int c, size_t n);
void			*ft_calloc(size_t nmemb, size_t size);
void			*ft_memset(void *s, int c, size_t n);
void			*ft_bzero(void *s, size_t n);
char			*ft_strnstr(const char *big, const char *little, size_t len);
char			*ft_strrchr(const char *s, int c);
char			*ft_strchr(const char *s, int c);
char			*ft_strdup(const char *s);
long			ft_atol(const char *nptr);
int				ft_strncmp(const char *s1, const char *s2, size_t n);
int				ft_memcmp(const void *s1, const void *s2, size_t n);
int				ft_atoi(const char *nptr);
int				ft_toupper(int c);
int				ft_tolower(int c);
int				ft_isalnum(int c);
int				ft_isalpha(int c);
int				ft_isascii(int c);
int				ft_isdigit(int c);
int				ft_isprint(int c);
//	Part 2
void			ft_striteri(char *s, void (*f)(unsigned int, char*));
void			ft_putendl_fd(char *s, int fd);
void			ft_putchar_fd(char c, int fd);
void			ft_putstr_fd(char *s, int fd);
void			ft_putnbr_fd(int n, int fd);
char			**ft_split(char *str, char c);
char			*ft_substr(char const *s, unsigned int start, size_t len);
char			*ft_strmapi(char const *s, char (*f)(unsigned int, char));
char			*ft_strtrim(char const *s1, char const *set);
char			*ft_strjoin(char const *s1, char const *s2);
char			*ft_itoa_base(int n, const char *b);
char			*ft_itoa(int n);

// Bonuses
typedef struct s_list
{
	void			*content;
	struct s_list	*next;
}				t_list;

#endif

================
File: Makefile
================
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: elagouch <elagouch@student.42lyon.fr>      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/05 15:39:47 by elagouch          #+#    #+#              #
#    Updated: 2024/11/12 17:49:52 by elagouch         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME = libft.a
CC = cc
CFLAGS = -Wall -Werror -Wextra -Wpedantic
SRC =				\
	ft_atoi.c		\
	ft_bzero.c		\
	ft_calloc.c		\
	ft_isalnum.c	\
	ft_isalpha.c	\
	ft_isascii.c	\
	ft_isdigit.c	\
	ft_isprint.c	\
	ft_itoa.c		\
	ft_memchr.c		\
	ft_memcmp.c		\
	ft_memcpy.c		\
	ft_memmove.c	\
	ft_memset.c		\
	ft_putchar_fd.c	\
	ft_putendl_fd.c	\
	ft_putnbr_fd.c	\
	ft_putstr_fd.c	\
	ft_split.c		\
	ft_strdup.c		\
	ft_strrchr.c	\
	ft_strchr.c		\
	ft_striteri.c	\
	ft_strjoin.c	\
	ft_strlcat.c	\
	ft_strlcpy.c	\
	ft_strlen.c		\
	ft_strmapi.c	\
	ft_strnstr.c	\
	ft_strncmp.c	\
	ft_strtrim.c	\
	ft_tolower.c	\
	ft_toupper.c	\
	ft_substr.c
SRC_BONUS =
OBJ = $(SRC:.c=.o)

LIB=libft.a

all: $(NAME)
bonus:
	make -e SRC="$(SRC) $(SRC_BONUS)"
$(NAME): $(OBJ)
	ar rcs $(NAME) $(OBJ)
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
clean:
	rm -f $(OBJ)
fclean: clean
	rm -f $(NAME)
re: fclean all

.PHONY: all fclean re bonus

================
File: README.md
================
# libft

## Functions to implement

### libc

- [x] ft\_isalpha
- [x] ft\_isdigit
- [x] ft\_isalnum
- [x] ft\_isascii
- [x] ft\_isprint
- [x] ft\_strlen
- [x] ft\_memset
- [x] ft\_bzero
- [x] ft\_memcpy
- [x] ft\_memmove
- [x] ft\_strlcpy
- [x] ft\_strlcat
- [x] ft\_toupper
- [x] ft\_tolower
- [x] ft\_strchr
- [x] ft\_strrchr
- [x] ft\_strncmp
- [x] ft\_memchr
- [x] ft\_memcmp
- [x] ft\_strnstr
- [x] ft\_atoi
- [x] ft\_calloc
- [x] ft\_strdup

### Additional functions

- [x] ft\_substr
- [x] ft\_strjoin
- [x] ft\_strtrim
- [x] ft\_split
- [x] ft\_itoa
- [x] ft\_strmapi
- [x] ft\_striteri
- [x] ft\_putchar\_fd
- [x] ft\_putstr\_fd
- [x] ft\_putendl\_fd
- [x] ft\_putnbr\_fd
